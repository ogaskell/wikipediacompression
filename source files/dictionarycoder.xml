<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.10/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.10/ http://www.mediawiki.org/xml/export-0.10.xsd" version="0.10" xml:lang="en">
  <siteinfo>
    <sitename>Wikipedia</sitename>
    <dbname>enwiki</dbname>
    <base>https://en.wikipedia.org/wiki/Main_Page</base>
    <generator>MediaWiki 1.36.0-wmf.36</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Wikipedia</namespace>
      <namespace key="5" case="first-letter">Wikipedia talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="100" case="first-letter">Portal</namespace>
      <namespace key="101" case="first-letter">Portal talk</namespace>
      <namespace key="108" case="first-letter">Book</namespace>
      <namespace key="109" case="first-letter">Book talk</namespace>
      <namespace key="118" case="first-letter">Draft</namespace>
      <namespace key="119" case="first-letter">Draft talk</namespace>
      <namespace key="446" case="first-letter">Education Program</namespace>
      <namespace key="447" case="first-letter">Education Program talk</namespace>
      <namespace key="710" case="first-letter">TimedText</namespace>
      <namespace key="711" case="first-letter">TimedText talk</namespace>
      <namespace key="828" case="first-letter">Module</namespace>
      <namespace key="829" case="first-letter">Module talk</namespace>
      <namespace key="2300" case="first-letter">Gadget</namespace>
      <namespace key="2301" case="first-letter">Gadget talk</namespace>
      <namespace key="2302" case="case-sensitive">Gadget definition</namespace>
      <namespace key="2303" case="case-sensitive">Gadget definition talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Dictionary coder</title>
    <ns>0</ns>
    <id>894812</id>
    <revision>
      <id>962221295</id>
      <parentid>962196228</parentid>
      <timestamp>2020-06-12T20:01:10Z</timestamp>
      <contributor>
        <username>Thedrachex</username>
        <id>23118794</id>
      </contributor>
      <minor/>
      <comment>Revert vandalism</comment>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4022" xml:space="preserve">{{Refimprove|date=June 2020}}
A '''dictionary coder''', also sometimes known as a '''substitution coder''', is a class of [[lossless data compression]] algorithms which operate by searching for matches between the text to be compressed and a set of [[string (computer science)|string]]s contained in a [[data structure]] (called the 'dictionary') maintained by the encoder. When the encoder finds such a match, it substitutes a reference to the string's position in the data structure.

== Methods and applications ==
Some dictionary coders use a 'static dictionary', one whose full set of strings is determined before coding begins and does not change during the coding process. This approach is most often used when the message or set of messages to be encoded is fixed and large; for instance, an [[mobile app|application]] that stores the contents of a book in the limited storage space of a [[personal digital assistant|PDA]] generally builds a static dictionary from a [[concordance (publishing)|concordance]] of the text and then uses that dictionary to compress the verses. This scheme of using [[Huffman coding]] to represent indices into a concordance has been called "Huffword".&lt;ref&gt;Ian H. Witten, Alistair Moffat, and Timothy C. Bell. ''Managing Gigabytes''. New York: Van Nostrand Reinhold, 1994. {{ISBN|9780442018634}}.&lt;/ref&gt;

In a related and more general method, a dictionary is built from redundancy extracted from a data environment (various input streams) which dictionary is then used statically to compress a further input stream. For example, a dictionary is built from old English texts then is used to compress a book.&lt;ref&gt;Rodney J. Smith. ''Streaming Compression System Using Dynamic Connection Groups'', US patent 5,748,955, priority date 20 December 1993.&lt;/ref&gt;

More common are methods where the dictionary starts in some predetermined state but the contents change during the encoding process, based on the data that has already been encoded. Both the [[LZ77 (algorithm)|LZ77]] and [[LZ78]] &lt;!-- yes, these currently link to the same article; they really shouldn't --&gt; algorithms work on this principle. In LZ77, a [[circular buffer]] called the "sliding window" holds the last ''N'' bytes of data processed. This window serves as the dictionary, effectively storing ''every'' substring that has appeared in the past ''N'' bytes as dictionary entries. Instead of a single index identifying a dictionary entry, two values are needed: the ''length'', indicating the length of the matched text, and the ''offset'' (also called the ''distance''), indicating that the match is found in the sliding window starting ''offset'' bytes before the current text.

LZ78 uses a more explicit dictionary structure; at the beginning of the encoding process, the dictionary is empty. An index value of zero is used to represent the end of a string, so the first index of the dictionary is one. At each step of the encoding process, if there is no match, then the last matching index (or zero) and character are both added to the dictionary and output to the compressed stream. If there is a match, then the working index is updated to the matching index, and nothing is output.

[[LZW]] is similar to LZ78, but, the dictionary is initialized to all possible symbols. The typical implementation works with 8 bit symbols, so the dictionary "codes" for hex 00 to hex FF (decimal 255) are pre-defined. Dictionary entries would be added starting with code value hex 100. Unlike LZ78, if a match is not found (or if the end of data), then only the dictionary code is output. This creates a potential issue since the decoder output is one step behind the dictionary. Refer to [[LZW]] for how this is handled. Enhancements to LZW include handing symbol sizes other than 8 bits and having reserved codes to reset the dictionary and to indicate end of data.

== References ==
{{reflist}}

==See also==
* [[Grammar-based code]]
* [[Entropy encoding]]

{{Compression Methods}}

[[Category:Lossless compression algorithms]]</text>
      <sha1>ldd0igc3kuu67dh4oj7e9qbp524hjyl</sha1>
    </revision>
  </page>
</mediawiki>
